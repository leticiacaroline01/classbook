{"title":"Análise e Visualização dos dados no R","markdown":{"headingText":"Análise e Visualização dos dados no R","containsRefs":false,"markdown":"\nBem-vindo(a) a uma jornada transformadora no universo da análise e visualização de dados, embasada pela versatilidade da linguagem R. Se você está prestes a mergulhar nos complexos padrões de informações em Fitopatologia ou em qualquer outra área do conhecimento, o R é, sem dúvida, uma das ferramentas mais poderosas e flexíveis que você pode ter ao seu lado.\n\n**Mas o que é o R?** Em sua essência, R é uma linguagem de programação e um ambiente de *software* livre e de código aberto, concebido especificamente para computação estatística e gráficos. Ele não é apenas um programa com botões; é um universo de possibilidades onde você pode escrever seu próprio \"código de receita\" para manipular, analisar e visualizar dados de formas que seriam impensáveis com ferramentas mais limitadas.\n\nA beleza do R reside em sua **flexibilidade e na vasta comunidade** que o apoia. Com dezenas de milhares de pacotes (extensões com funções pré-programadas para tarefas específicas), o R se adapta a qualquer desafio, desde simples cálculos estatísticos até modelos preditivos complexos, passando por visualizações de dados deslumbrantes e a criação de relatórios dinâmicos e websites interativos.\n\nNeste livro, embarcaremos juntos na exploração de como o R pode ser seu principal aliado para transformar dados brutos em *insights* valiosos, especialmente no contexto da Fitopatologia. Você descobrirá como essa linguagem pode empoderá-lo(a) a:\n\n-   Organizar e limpar conjuntos de dados complexos.\n\n-   Aplicar uma ampla gama de análises estatísticas, desde as mais básicas até as mais avançadas.\n\n-   Criar gráficos e visualizações impactantes que comunicam suas descobertas de forma clara e eficaz.\n\n-   Desenvolver ferramentas e relatórios que podem ser compartilhados e reproduzidos por outros pesquisadores.\n\nPrepare-se para transcender a simples coleta de dados e adentrar o domínio da verdadeira compreensão dos fenômenos fitopatológicos, munido(a) de uma das mais robustas plataformas de análise de dados do mundo. O R é mais que uma ferramenta; é uma forma de pensar e interagir com a informação. Vamos começar!\n\n## Símbolos comuns no R e suas funções\n\n1.  **`<-` e `=` (Operadores de Atribuição)**\n\n    -   **Função:** Usados para atribuir um valor a um objeto (variável). `<-` é o preferido por muitos na comunidade R (por clareza e tradição), enquanto `=` é mais comum em outras linguagens e também funciona para atribuição, mas é mais frequentemente usado para especificar argumentos em funções.\n\n    -   **Exemplo:** `minha_variavel <- 10`, `meu_resultado = 5 * 2`\n\n2.  **`$` (Operador de Acesso)**\n\n    -   **Função:** Usado para acessar elementos nomeados em listas ou colunas em dataframes.\n\n    -   **Exemplo:** `meu_dataframe$nome_da_coluna`\n\n3.  **`|>` (Operador Pipe - Tidyverse)**\n\n    -   **Função:** Introduzido no R 4.1.0 e popularizado pelo `tidyverse`. Ele \"passa\" o resultado de uma função como o primeiro argumento da próxima função, tornando o código mais legível (fluxo da esquerda para a direita).\n\n    -   **Exemplo:** `dados_brutos |> filter(idade > 18) |> summarise(media = mean(salario))`\n\n4.  **`[` e `[[` (Operadores de Subconjunto/Indexação)**\n\n    -   **Função:**\n\n    -   `[` : Usado para selecionar subconjuntos de vetores, listas, dataframes ou matrizes. Mantém a estrutura do objeto (retorna um vetor, dataframe, etc.).\n\n    -   `[[` : Usado para extrair um único elemento de uma lista ou um único valor de uma coluna de dataframe. Simplifica a estrutura (retorna o conteúdo do elemento).\n\n    -   **Exemplo:** `meu_vetor[1]`, `minha_lista[[2]]`, `meu_dataframe[,\"coluna\"]`\n\n5.  **`:` (Operador de Sequência)**\n\n    -   **Função:** Cria uma sequência de números inteiros.\n\n    -   **Exemplo:** `1:5` (resultado: `c(1, 2, 3, 4, 5)`)\n\n6.  **`::` (Operador de Acesso a Pacote)**\n\n    -   **Função:** Permite acessar uma função ou objeto específico de um pacote sem precisar carregar o pacote inteiro com `library()`. Útil para evitar conflitos de nomes de funções entre pacotes.\n\n    -   **Exemplo:** `dplyr::select()` (usa a função `select` do pacote `dplyr`)\n\n7.  **`c()` (Função Combinar/Concatenar)**\n\n    -   **Função:** Usada para combinar valores em um vetor.\n\n    -   **Exemplo:** `c(1, 2, 3, 4)` (cria um vetor numérico)\n\n8.  **`function() {}` (Definição de Função)**\n\n    -   **Função:** A estrutura básica para definir suas próprias funções no R.\n\n    -   **Exemplo:** `minha_funcao <- function(argumento) { # código aqui }`\n\n9.  **`~` (Operador de Fórmula)**\n\n    -   **Função:** Usado em modelos estatísticos (como `lm()`, `glm()`, `aov()`) para especificar a relação entre a variável resposta e as variáveis preditoras.\n\n    -   **Exemplo:** `resposta ~ preditor1 + preditor2`\n\n10. **`#` (Comentário)**\n\n    -   **Função:** Tudo o que segue o `#` em uma linha é ignorado pelo R, usado para adicionar notas e explicações ao código.\n\n    -   **Exemplo:** `minha_variavel <- 10 # Isso é um comentário`\n\n11. **`%in%` (Operador de Correspondência)**\n\n    -   **Função:** Verifica se elementos de um vetor estão presentes em outro vetor.\n\n    -   **Exemplo:** `c(1, 3) %in% c(1, 2, 3, 4)` (resultado: `TRUE TRUE FALSE`)\n\n## Pacotes utilizados no R\n\nNo **programa R**, os pacotes (ou \"packages\") são conjuntos de funções, dados, e documentação que ampliam as capacidades básicas da linguagem. O R por si só já oferece muitas funcionalidades estatísticas, mas os pacotes permitem realizar tarefas mais específicas e avançadas, c**omo análises estatísticas, visualizações, modelagens complexas, entre outras**. Durantes as aulas da disciplina, foram utilizados uma diversidade de pacotes, que se diferiram de acordo com o tema e atividade da aula. Esses pacootes estão listados abaixo:\n\n![](images/clipboard-339242723.png){fig-align=\"center\" width=\"615\"}\n\n### Principais pacotes\n\n#### 1. Manipulação, leitura e limpeza de dados\n\n**tidyverse**: conjunto de pacotes integrados para importação, manipulação e visualização de dados de forma eficiente e moderna.\n\n**readxl**: permite importar arquivos do Excel (.xlsx) diretamente para o R.\n\n**writexl**: exporta data frames do R para arquivos Excel (.xlsx).\n\n**gsheet**: importa dados de planilhas públicas do Google Sheets diretamente para o R.\n\n**janitor**: limpa e padroniza dados, como nomes de colunas e detecção de linhas duplicadas ou faltantes.\n\n**DT**: exibe tabelas interativas e dinâmicas em HTML dentro do RMarkdown ou Shiny.\n\n#### 2. Visualização de dados\n\n**ggthemes**: adiciona temas visuais prontos e estilizados aos gráficos criados com `ggplot2`.\n\n**patchwork**: permite combinar múltiplos gráficos feitos com `ggplot2` em uma única visualização organizada.\n\n**ggpubr**: facilita a criação de gráficos estatísticos publicáveis, adicionando testes de hipóteses e elementos gráficos com praticidade.\n\n#### 3. Análises estatísticas e testes\n\n**agricolae**: realiza análises estatísticas voltadas à experimentação agrícola, como ANOVA, Tukey, Scott-Knott e DCA.\n\n**rstatix**: oferece funções amigáveis para aplicar testes estatísticos (ANOVA, teste t, correlação, etc.) em dados tidy.\n\n**report**: gera relatórios interpretáveis com explicações automatizadas dos resultados de testes e modelos.\n\n**car**: fornece funções para diagnósticos e análises de regressão, como ANOVA tipo II/III e verificação de colinearidade (VIF).\n\n**emmeans**: calcula médias ajustadas (médias marginais) e permite comparações entre níveis de fatores em modelos.\n\n**multcomp**: realiza comparações múltiplas com controle de erro (ex: Tukey, Dunnett).\n\n**multcompView**: gera letras indicativas de grupos estatisticamente diferentes para visualização em tabelas e gráficos.\n\n#### 4. Modelagem estatística e diagnóstico de resíduos\n\n**lme4**: ajusta modelos lineares mistos com efeitos fixos e aleatórios.\n\n**MASS**: oferece funções para ajustes estatísticos clássicos, como regressão binomial negativa e modelos robustos.\n\n**DHARMa**: simula resíduos e diagnostica suposições de modelos generalizados e mistos.\n\n**performance**: avalia a qualidade de modelos estatísticos, calculando métricas como R², AIC, VIF e resíduos padronizados.\n\n#### 5. Análises em Fitopatologia e bioensaios\n\n**epifitter**: ajusta modelos de progresso de doenças em plantas (logístico, gompertz, monomolecular) e calcula parâmetros epidemiológicos.\n\n**drc**: ajusta curvas dose-resposta para estimar parâmetros como CL50 e CE50.\n\n**ec50estimator**: estima valores de EC50 a partir de dados experimentais de forma automatizada.\n\n#### 6. Geolocalização e mapas\n\n**rnaturalearth**: fornece dados geográficos vetoriais de países, continentes e rios para criação de mapas com `ggplot2`.\n\n### Instalação e carregamentos dos pacotes\n\n#### Como utilizar os pacotes\n\n1.  **Instalar o pacote** (somente uma vez):\n\n`install.packages(\"nome_do_pacote\")`\n\n2.  **Carregar o pacote** (sempre que for usar):\n\n`library(nome_do_pacote)`\n\nNo inicio da utilização do R e começo das análises, utilizamos alguns pacotes. Esses pacotes nos ajudaram a organizar, manipular e analisar os dados de forma prática e eficiente. Nesta etapa inicial, vimos como criar vetores e data frames, e utilizar funções básicas aplicadas, como o cálculo da Área Abaixo da Curva de Progresso da Doença (AUDPC).\n\nAbaixo contém alguns exemplos de utilização de pacotes:\n\n```{r}\nlibrary(agricolae)\ndates <- c(14,21,28)\ndates\n```\n\n```{r}\nseverity <- c(40,80,90)\nseverity\n```\n\n```{r}\naudpc(severity, dates)\n```\n\n```{r}\ndata(corn)\nstr(corn)\n\n```\n\n```{r}\nlibrary(tidyverse)\ndates <- c(7,14,21,28,35, 42)\nseverity <- c(0.1, 5, 10, 35, 50, 60)\ndata_curva <- data.frame(dates, severity)\ndata_curva\n```\n\n## Funções no R\n\nAs **funções** são blocos de código prontos que realizam tarefas específicas no R. Elas servem para **automatizar processos**, **realizar cálculos**, **fazer testes estatísticos**, **gerar gráficos** e muito mais. Sempre que digita algo como `mean()`, `plot()`, `lm()` ou `aov()`, está utilizando uma função. Geralmente, uma função recebe **entradas** (chamadas de argumentos), executa algum processamento com esses dados e retorna um **resultado**. Por exemplo, a função `mean(x)` calcula a média de um conjunto de valores armazenados em `x`.\n\nNo R, praticamente tudo é feito através de funções. Por isso, aprender a usá-las é essencial para conseguir analisar dados de forma prática, organizada e reprodutível. A seguir, tem as principais funções que foram usadas durante as aulas, separadas por finalidade.\n\n![](images/clipboard-2919829698.png){fig-align=\"center\" width=\"325\"}\n\n#### Principais funções\n\n#### 1. Organização, manipulação e importação de dados\n\n**`attach()`**`:` torna as colunas de um data frame acessíveis diretamente pelo nome, sem precisar usar `$`. Deve ser usada com cautela, pois pode causar confusão se houver objetos com nomes iguais no ambiente.\n\n**detach()**: desfaz o efeito do `attach()`, removendo o acesso direto às colunas do data frame.\n\n**mutate()** *(do pacote `dplyr`)*: cria novas colunas em um data frame ou modifica colunas existentes com base em expressões.\n\n**select()** *(`dplyr`)*: seleciona colunas específicas de um data frame, útil para reorganizar ou reduzir variáveis.\n\n**pull()** *(`dplyr`)*: extrai uma única coluna de um data frame como vetor.\n\n**rbind()**: combina data frames ou vetores por **linhas**, empilhando os dados.\n\n**count()** *(`dplyr`)*: conta o número de ocorrências de cada categoria de uma variável.\n\n**gsheet2tbl()** *(do pacote `gsheet`)*: importa dados diretamente de uma planilha do Google Sheets para o R como data frame.\n\n#### 2. Visualização e diagnóstico gráfico\n\n**plot()**: função genérica para fazer gráficos básicos (dispersão, linha, boxplot, etc.), dependendo do tipo de objeto fornecido.\n\n**ggplot()** *(do pacote `ggplot2`)*: inicia a construção de gráficos no estilo “Grammar of Graphics”, permitindo criar visualizações elegantes e altamente personalizáveis.\n\n**hist()**: cria histogramas para visualizar a distribuição de variáveis numéricas.\n\n**qqnorm()**: plota os quantis teóricos normais contra os quantis da amostra, usado para verificar se os dados seguem distribuição normal.\n\n**qqline()**: adiciona uma linha de referência ao gráfico `qqnorm()` para facilitar a comparação com a normalidade.\n\n**interaction.plot()**: cria gráficos de interação entre dois fatores, útil para visualização de efeitos cruzados em ANOVA.\n\n#### 3. Estatística descritiva e testes de suposição\n\n**var.test()**: realiza o teste F para comparar variâncias entre dois grupos, usado antes de testes como t ou ANOVA.\n\n**shapiro.test()**: aplica o teste de Shapiro-Wilk para verificar se os dados seguem distribuição normal.\n\n**bartlett.test()**: testa a homogeneidade de variâncias entre grupos (pré-requisito da ANOVA).\n\n**leveneTest()** *(do pacote `car`)*: alternativa ao teste de Bartlett, menos sensível a desvios da normalidade, usada para verificar homocedasticidade.\n\n**cor()**: calcula a correlação entre duas variáveis numéricas (por padrão, correlação de Pearson).\n\n**cor.test()**: realiza o teste de correlação entre duas variáveis, retornando o valor-p e intervalo de confiança.\n\n#### 4. Análises estatísticas (modelos e testes)\n\n**aov()**: ajusta um modelo de análise de variância (ANOVA), usado para comparar médias entre três ou mais grupos.\n\n**anova()**: realiza análise de variância em objetos de modelos (`lm`, `aov`, etc.) ou compara modelos ajustados.\n\n**lm()**: ajusta modelos lineares simples ou múltiplos. Permite avaliar a relação entre uma variável resposta e uma ou mais variáveis preditoras.\n\n**kruskal.test()**: teste de Kruskal-Wallis, alternativa não paramétrica à ANOVA, usado quando os dados não atendem aos pressupostos de normalidade ou homocedasticidade.\n\n**cld()** *(do pacote `multcompView` ou `emmeans`)*: gera letras indicando diferenças significativas entre grupos após ANOVA ou testes não paramétricos.\n\n**pwpm()** *(do pacote `emmeans`)*: apresenta a matriz de comparações par-a-par entre médias estimadas, indicando valores-p e letras significativas.\n\n**pairs()**: exibe comparações múltiplas entre grupos após o ajuste de um modelo (`aov`, `lm`, etc.).\n\n#### 5. Modelos avançados e diagnóstico de resíduos\n\n**simulateResiduals()** *(do pacote `DHARMa`)*: simula resíduos de modelos estatísticos (como modelos lineares generalizados) para verificar normalidade, dispersão e independência dos resíduos.\n\n**cv.model()** *(do pacote `performance` ou função customizada)*: calcula o coeficiente de variação (CV), que mede a variabilidade relativa do modelo.\n\nAbaixo contém alguns exemplos que foram utilizados em sala de aula:\\\n\n```{r}\ndados <- Orange\ndados2 <- dados \ncirc <- dados$circumference \ncirc\n```\n\n```{r}\ncirc2 <- circ+10 \ncirc2\n```\n\n```{r}\ndados \ndados$logcirc <- log(dados$circumference) \ndados$logcirc\n```\n\n```{r}\ndados \ndados$circumference \n```\n\n```{r}\nattach(dados) \ncircumference \n\n```\n\n```{r}\ndetach (dados)\n```\n\n```{r}\nplot(dados)\n```\n\n```{r}\nplot(dados$circumference)\n```\n\n```{r}\ndata(corn)\nstr(corn)\n```\n\n# Como importar dados no R\n\nAntes de realizar qualquer análise, o primeiro passo é **importar os dados** para o software R. Esses dados podem estar em diferentes formatos, como planilhas do Excel, arquivos `.csv`, ou até mesmo em plataformas online como o Google Sheets. O R oferece diversas funções e pacotes que facilitam esse processo, permitindo que os dados sejam lidos de forma rápida, segura e estruturada. Dominar as formas de importação é fundamental para garantir que os dados cheguem prontos para análise, com os tipos corretos de variáveis e sem erros de leitura.\n\n![](images/clipboard-166005103.png){width=\"597\"}\n\nAbaixo contém alguns exemplos práticos de como importar dados de diferentes fontes usando funções específicas.\n\n### Dados dentro do próprio R\n\nO R já possui diversos **conjuntos de dados integrados**, que podem ser utilizados para treinar comandos, testar funções ou praticar análises estatísticas. Esses dados são ideais para aprendizado, pois estão sempre disponíveis e já vêm formatados corretamente. Para utilizá-los, basta chamar o nome do conjunto de dados ou atribuí-lo a um objeto. Por exemplo, o dataset `orange` traz informações sobre o crescimento de laranjeiras, incluindo a circunferência do tronco ao longo do tempo.\n\n```{r}\ndados <- Orange\nOrange\n```\n\n```{r}\nplot(dados$circumference)\n```\n\n### Dados em formato Excel\n\nAlém dos dados internos do R, é comum trabalhar com **planilhas externas**, como arquivos `.xlsx` do Excel. Para isso, utilizamos o pacote `readxl`, que permite importar planilhas de forma simples e eficiente.\n\nNos exemplos abaixo, carregamos planilhas de dados no Excel `dados-diversos.xlsx`:\n\n#### Exemplo de dados em formato excel\n\n```{r}\nlibrary(tidyverse)\nlibrary(readxl)\n\ndados3 <- read_excel(\"dados-diversos.xlsx\",\n                    sheet = \"sensibilidade_fungicidas\")\ndados3\n```\n\n```{r}\ndados3 <- dados3 |>\n  mutate (dose = as.numeric(dose))\n```\n\n```{r}\nstr(dados)\n```\n\n```{r}\nglimpse(dados2)\n```\n\n```{r}\nlibrary(readxl)\nread_excel(\"dados-diversos.xlsx\",\n                    sheet = \"fungicida_vaso\")\n```\n\n```{r}\nantifungicos <- read_excel(\"dados-diversos.xlsx\",\n                      sheet = \"fungicida_vaso\")\nantifungicos\n```\n\n```{r}\ncampo <- read_excel(\"dados-diversos.xlsx\",\"fungicida_campo\")\ncampo\n```\n\n```{r}\nmilho <- read_excel(\"dados-diversos.xlsx\",\"milho\")\nmilho\n```\n\n### Dados em formato CSV\n\nO formato `.csv` (Comma-Separated Values) é amplamente utilizado para armazenar dados em tabelas simples, sendo compatível com diversos programas como Excel, LibreOffice e Google Sheets. No R, utilizamos a função `read_csv()` do pacote `readr` para importar arquivos `.csv`. Também podemos exportar dados para esse formato usando a função `write_csv()` do pacote `writexl`, o que é útil para salvar e compartilhar os resultados da análise.\n\n```{r}\ncurve <- read_csv(\"curve.csv\")\n\nlibrary(writexl)\nwrite_csv(curve, \"curve.csv\")\n```\n\n### Dados em formato google sheets\n\nO pacote `gsheet` também permite importar **várias planilhas** diretamente da nuvem. Isso é especialmente útil em situações onde os dados estão organizados em diferentes abas ou arquivos no Google Drive, como em experimentos com diferentes tratamentos, localidades ou avaliações. No exemplo abaixo, utilizamos a função `gsheet2tbl()` repetidamente para importar conjuntos de dados distintos a partir de seus links públicos. Cada objeto (`dados_mg`, `survey`, `micelia1`, `dat_mg`, etc.) representa uma tabela específica contida em uma aba do Google Sheets:\n\n```{r}\nlibrary(gsheet)\n\ndados_mg <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137\")\ndados_mg\n```\n\n```{r}\nsurvey <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738\")\nsurvey\n```\n\n```{r}\nmg <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137\")\nmg\n```\n\n```{r}\nmicelial <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=959387827#gid=959387827\")\nmicelial\n```\n\n```{r}\ndat_mg <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137\")\ndat_mg\n```\n\n```{r}\nescala <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1729131173#gid=1729131173\")\nescala\n```\n\n```{r}\nmicelial <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=959387827#gid=959387827\")\nmicelial\n```\n\n```{r}\nestande <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555\")\nestande\n```\n\n```{r}\nfungi <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652\")\nfungi\n```\n\n```{r}\ncr <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1871397229#gid=1871397229\")\ncr\n```\n\n## Manipulação dos dados da planilha\n\nApós importar os dados, é comum precisar organizá-los para facilitar a análise. Isso pode incluir tarefas como selecionar variáveis, filtrar observações específicas, juntar tabelas ou contar combinações de variáveis. Essas operações são chamadas de manipulação de dados, e no R, utilizamos principalmente o pacote `dplyr` para isso. Com uma sintaxe simples e eficiente, ele permite trabalhar de forma clara e encadeada por meio do operador pipe (`|>`).\n\nNo chuck de código abaixo realiza uma contagem de combinações entre as variáveis `state` e `residue` no data frame `survey`. Primeiro, os dados são agrupados por estado e tipo de resíduo com `group_by(state, residue)`. Em seguida, `count()` contabiliza quantas observações existem em cada grupo.\n\n```{r}\nsurvey |> \n  group_by(state, residue) |>\n  count()\n```\n\nNesse chunck de código, está realizando uma filtragem dos dados do data frame `survey` com base na coluna `state`. Ela separa os dados de dois estados diferentes: O objeto `RS` recebe apenas os dados do estado do Rio Grande do Sul (`\"RS\"`). O objeto `PR` recebe somente os dados do Paraná (`\"PR\"`).\n\nEssa etapa é útil quando queremos analisar os dados de forma individual por estado, como comparar resultados, fazer gráficos separados ou aplicar testes estatísticos específicos para cada região.\n\n```{r}\nRS <- survey |>\n  filter(state == \"RS\")\n\nPR <- survey |>\n  filter(state == \"PR\")\n```\n\nEsse trecho de código está juntando dois data frames (`RS` e `PR`) em um único conjunto de dados chamado `combinado`, utilizando a função `rbind()`. A função `rbind()` (\"row-bind\"). Em seguida, `rbind()` une essas duas tabelas em uma única, chamada `combinado`, mantendo todas as observações. Essa abordagem é útil quando queremos reunir os dados segmentados novamente, seja para análises comparativas, geração de gráficos ou modelagens mais amplas.\n\n```{r}\ncombinado <- rbind(RS, PR)\n```\n\nEsse trecho de código está juntando dois data frames (`RS` e `PR`) em um único conjunto de dados chamado `combinado`, utilizando a função `rbind()`. A função `rbind()` (\"row-bind\") concatena linhas de dois ou mais data frames que possuem a mesma estrutura de colunas. Neste caso: Os dados dos estados do Rio Grande do Sul (RS) e do Paraná (PR) foram previamente filtrados. Agora, `rbind()` une essas duas tabelas em uma única, chamada `combinado`, mantendo todas as observações. Essa abordagem é útil quando queremos reunir os dados segmentados novamente, seja para análises comparativas, geração de gráficos ou modelagens mais amplas.\n\n```{r}\nsurvey_b <- survey |> \n  dplyr::select(year, state, species)\n```\n\n```{r}\nsurvey_2009 <- survey |> \n  dplyr::select(year, state, species) |>\n  filter(year == 2009)\n```\n\nEsse trecho de código está criando uma tabela de contingência entre os valores das variáveis `year` e `species` utilizando a função `tabyl()` do pacote `janitor`. A função `tabyl()` permite gerar rapidamente tabelas de frequência cruzadas (também chamadas de tabelas de dupla entrada) de forma simples e clara: `year` define as linhas da tabela. `species` define as colunas da tabela. O resultado mostra quantas observações de cada espécie ocorreram em cada ano. É uma maneira eficiente de explorar e resumir dados categóricos.\n\n```{r}\nlibrary(janitor)\nsurvey_b |>\n  tabyl(year,species)\n```\n\nJá no exemplo abaixo, transformamos os dados de um formato longo (onde cada linha representa uma medição de um tratamento) para um formato largo, no qual cada coluna representa um tratamento específico. Essa transformação foi feita com a função `pivot_wider()`, utilizando as colunas `trat` como nomes de colunas e `comp` como valores. Em seguida, removemos a coluna `rep`, que indicava a repetição, com a função `select(-rep)`. Esse tipo de estrutura é útil para comparar diretamente os valores dos tratamentos lado a lado.\n\n```{r}\nlibrary(tidyverse)\ndat_mg2 <- dat_mg |>\n  pivot_wider(names_from = trat, values_from = comp) |>\n  dplyr::select(-\"rep\") \n\ndat_mg2\n```\n\n# Gráficos em R\n\n![](images/clipboard-3579258872.png)\n\n#### Visualização de dados em GGPLOT\n\nNo R, uma das formas mais poderosas e flexíveis de criar gráficos é utilizando o pacote `ggplot2`, que faz parte do `tidyverse`. Com `ggplot2`, podemos construir gráficos em camadas (layer by layer), o que permite personalizações detalhadas e a criação de visualizações claras e informativas. A lógica do `ggplot2` é baseada na gramática dos gráficos, onde você define: os dados a serem utilizados, o mapeamento estético (eixos, cores, tamanhos, etc.), e as camadas geométricas que representarão os dados (como pontos, linhas ou colunas).\n\n#### Principais gráficos realizados no R\n\n##### **Gráfico de Barras**\n\n**Usado para:** Comparar categorias ou grupos.\n\nFunções:\n\nbarplot() (base R)\n\ngeom_bar() (contagens automáticas com ggplot2)\n\ngeom_col() (valores definidos)\n\n##### **Gráfico de Linhas**\n\n**Usado para:** Exibir tendências ao longo do tempo.\n\nFunções:\n\n   plot(..., type = \"l\") (base R)\n\n   geom_line() (ggplot2)\n\n##### **Gráfico de Dispersão (Scatter Plot)**\n\n**Usado para:** Visualizar a relação entre duas variáveis numéricas.\n\nFunções:\n\n   plot(x, y) (base R)\n\n   geom_point() (ggplot2)\n\n##### **Boxplot**\n\n**Usado para:** Visualizar a distribuição de dados (mediana, quartis, outliers).\n\nFunções:\n\n   boxplot() (base R)\n\n   geom_boxplot() (ggplot2)\n\n##### **Histograma**\n\n**Usado para:** Ver a frequência de valores contínuos.\n\nFunções:\n\n   hist() (base R)\n\n   geom_histogram() (ggplot2)\n\n##### **Gráfico de Área**\n\n**Usado para:** Mostrar proporções ou variações acumuladas ao longo do tempo.\n\nFunções:\n\n   geom_area() (ggplot2)\n\n##### **Gráfico de Pizza**\n\n**Usado para:** Mostrar proporções de categorias (menos recomendado em análises técnicas).\n\nFunções:\n\n   pie() (base R)\n\n##### **Gráfico de Barras Empilhadas**\n\n**Usado para:** Comparar composição de grupos.\n\nFunções:\n\n   geom_bar(position = \"stack\") (ggplot2)\n\n   geom_bar(position = \"fill\") para proporções\n\n##### **Gráficos de Violino**\n\n**Usado para:** Visualizar a densidade da distribuição dos dados com formato semelhante ao boxplot.\n\nFunções:\n\n   geom_violin() (ggplot2)\n\n##### **Facets (Painéis por categoria)**\n\n**Usado para:** Criar vários gráficos por subgrupo automaticamente.\n\nFunções:\n\n   facet_wrap(\\~variável) ou facet_grid() (ggplot2)\n\n#### Principais configurações nos gráficos\n\n![](images/tabela_personalizacao_grafico.png)\n\nAbaixo contém alguns dos gráficos que foram realizados durante as aulas:\n\n```{r}\ndata_curva |> \n  mutate(severity2 = c(1, 10, 35, 58, 70, 79)) |>\n  ggplot(aes(dates, severity2))+\n  geom_col()+\n  #geom_area(fill = \"blue\")+\n  geom_line(linewidth = 2, color = \"black\")+ \n  geom_point(size = 4, color = \"black\")+\n  theme_bw(base_size = 14)+\n  labs(x = \"Dia após o plantio\",\n       y = \"Severidade (%)\")+\n  scale_y_continuous(limits = c(0, 100), n.breaks = 10) +\n  scale_x_continuous(n.breaks = 8)\n```\n\n```{r}\ndata_curva |> \n  mutate(severity2 = c(1, 10, 35, 58, 70, 79)) |>\n  ggplot(aes(dates, severity2))+\n  geom_col()+\n  geom_area(fill = \"blue\")+\n  geom_line(linewidth = 2, color = \"black\")+ \n  geom_point(size = 4, color = \"black\")+\n  theme_bw(base_size = 14)+\n  labs(x = \"Dia após o plantio\",\n       y = \"Severidade (%)\")+\n  scale_y_continuous(limits = c(0, 100), n.breaks = 10) +\n  scale_x_continuous(n.breaks = 8)\n```\n\n```{r}\nsurvey_b |>\n  group_by(year, species) |>\n  count() |> \n  ggplot(aes(species,n))+ \n  geom_col()+\n  facet_wrap(~year)\n```\n\n```{r}\nsurvey_b |>\n  group_by(year, species) |>\n  count() |> \n  ggplot(aes(year,n, fill = species, \n             color = species))+ \n  geom_col()+\n# scal_fill_manual(values = c(\"red\", \"blue\"))+\n# scale_fill_grey()+ \n  scale_color_viridis_d()\n# facet_wrap(~year)\n```\n\n```{r}\nsurvey_b |>\n  group_by(year, species) |>\n  count() |> \n  ggplot(aes(year,n, fill = species, \n             color = species))+ \n  geom_col()+\n  scale_fill_manual(values = c(\"red\", \"blue\"))+\n# scale_fill_grey()+ \n  scale_color_viridis_d()\n# facet_wrap(~year)\n```\n\n```{r}\nsurvey_b |>\n  group_by(year, species) |>\n  count() |> \n  ggplot(aes(year,n, fill = species, \n             color = species))+ \n  geom_col()+\n# scal_fill_manual(values = c(\"red\", \"blue\"))+\n  scale_fill_grey()+ \n  scale_color_viridis_d()\n# facet_wrap(~year)\n```\n\n```{r}\nsurvey_b |>\n  group_by(year, species) |>\n  count() |> \n  ggplot(aes(year,n, fill = species, \n             color = species))+ \n  geom_col()+\n# scal_fill_manual(values = c(\"red\", \"blue\"))+\n# scale_fill_grey()+ \n  scale_color_viridis_d()+\n  facet_wrap(~year)\n```\n\n```{r}\nlibrary(ggthemes)\nplot_mg <- mg |>\n  ggplot(aes(trat, comp))+ \n  geom_boxplot(fill = \"grey\", \n               outlier.colour = NA)+\n  geom_jitter(width = 0.1, color = \"grey20\")+\n  scale_y_continuous(limits = c(5,20))+\n  labs(x = \"Tratamento\",\n       y = \"Comprimento (mm)\")+\n  theme_minimal()\n\nplot_mg\n\nggsave(\"box.png\", bg = \"white\", width = 5,\n       height = 5)\n```\n\n```{r}\nplot_micelial <- micelial |>\n  ggplot(aes(reorder(especie, tcm),tcm))+ \n  geom_boxplot(fill = \"darkgreen\", \n               outlier.colour = NA)+\n  geom_jitter(width = 0.1, color = \"grey20\")+\n  scale_y_continuous(limits = c(0,2))+\n  labs(x = \"\", y = \"Taxa de crescimento micelial (mm/dia)\")+\n  theme_minimal()+\n  coord_flip()\n\nplot_micelial\n```\n\n```{r}\ndat_mg\n```\n\n```{r}\ndat_mg |> \n  ggplot(aes(trat,comp))+ \n  geom_jitter(width = 0.1)\n```\n\n```{r}\nlibrary(ggpubr)\np <- ggboxplot(\n  dat_mg, x = \"trat\", y = \"comp\",\n  color = \"trat\", palette = \"jco\")\n\np\n```\n\n```{r}\nlibrary(rstatix)\ntest <- t_test(comp ~ trat, data = dat_mg)\ntest\n```\n\n```{r}\np + stat_pvalue_manual(test, label = \"p\",\ny.position = 18)+\n  ylim(0,20)+\n  labs(x = \"Tratamento\", \n       y = \"Comprimento da lesão (mm)\")\n```\n\n## Como combinar dois gráficos\n\nAo trabalhar com visualizações em R, muitas vezes é útil apresentar dois ou mais gráficos lado a lado para facilitar comparações ou contar uma história visual mais completa. O pacote `patchwork` facilita essa tarefa, permitindo combinar gráficos criados com `ggplot2` de forma intuitiva e elegante. A função `|` posiciona os gráficos lado a lado na horizontal, enquanto `+` permite empilhá-los verticalmente. No exemplo `(plot_mg | plot_micelial) + plot_annotation(tag_levels = \"a\")`, dois gráficos (`plot_mg` e `plot_micelial`) são combinados horizontalmente e recebem etiquetas automáticas (\"a\", \"b\", etc.) com a função `plot_annotation`. Essa abordagem é especialmente útil para gerar figuras mais organizadas e comparativas em relatórios ou apresentações científicas.\n\n```{r}\nlibrary(patchwork)\n(plot_mg | plot_micelial) +\n  plot_annotation(tag_levels = \"a\")\n```\n\n## Como salvar gráficos\n\nApós criar um gráfico com `ggplot2`, é possível salvá-lo diretamente como imagem usando a função `ggsave()`, do próprio pacote. Essa função permite exportar gráficos para diversos formatos, como `.png`, `.pdf` e `.jpg`, facilitando sua inclusão em apresentações, artigos ou relatórios. Por padrão, `ggsave()` salva o último gráfico gerado, mas também pode receber um objeto gráfico como argumento. É possível definir o nome do arquivo, o tamanho da imagem (`width` e `height`) e a cor de fundo (`bg`). Por exemplo:\n\n`ggsave(\"box.png\", bg = \"white\", width = 5, height = 5)` salva uma imagem quadrada com fundo branco;\n\n`ggsave(\"comb.png\", bg = \"white\", width = 8, height = 4)` salva uma figura retangular, ideal para gráficos combinados;\n\n`ggsave(\"plot2.png\", bg = \"white\")` salva o gráfico com dimensões padrão.\n\nEssa é uma prática essencial para documentar e compartilhar visualizações com qualidade e controle sobre o formato.\n\n```{r}\nggsave(\"box.png\", bg = \"white\", width = 5,\n       height = 5)\n\nggsave(\"comb.png\", bg = \"white\",\n       width = 8, height = 4)\n\nggsave(\"plot2.png\", bg = \"white\")\n```\n\n# Análises estatísticas em R\n\nO R é uma linguagem de programação e ambiente de software amplamente utilizado para computação estatística e gráficos. Sua flexibilidade e vasta coleção de pacotes (bibliotecas) tornam-no uma ferramenta indispensável para análises estatísticas, desde a exploração inicial de dados e visualizações complexas até a modelagem estatística avançada, como regressão, análise de variância e métodos multivariados. A capacidade do R de manipular, processar e visualizar grandes conjuntos de dados, aliada à sua natureza de código aberto e comunidade ativa, permite que pesquisadores e analistas desenvolvam e apliquem metodologias estatísticas rigorosas para extrair insights significativos e embasar a tomada de decisões em diversas áreas do conhecimento. Durante a aula foram realizadas diversas análises estatísticas que serão demostrasdas abaixo:\n\n![](images/clipboard-2038139507.png){fig-align=\"center\" width=\"403\"}\n\n## Teste t\n\nO teste t é uma das análises estatísticas mais utilizadas para comparar médias entre dois grupos e verificar se a diferença observada entre eles é estatisticamente significativa. No R, essa análise pode ser realizada com a função `t.test()`, que permite testar tanto amostras independentes quanto pareadas (dependentes), além de definir se a variância dos grupos deve ser considerada igual ou não. O teste retorna informações importantes como valor-p, estatística t, intervalos de confiança e estimativas das médias. Essa abordagem é essencial para avaliar diferenças entre tratamentos, genótipos, condições experimentais ou qualquer outra situação comparativa entre dois grupos. Por sua simplicidade e poder, o teste t é frequentemente o ponto de partida para análises estatísticas em experimentos científicos.\n\nNo exemplo a seguir, utilizamos a função `t.test()` para realizar um teste t entre dois grupos: `control` e `Mg2`, presentes no conjunto de dados `dat_mg2`. Para isso, aplicamos `attach(dat_mg2)` — o que facilita o acesso direto às variáveis contidas no objeto. O argumento `var.equal = FALSE` indica que as variâncias dos dois grupos não são iguais (teste t de Welch, mais robusto em muitos casos). O resultado é armazenado no objeto `t_results`. Em seguida, com o auxílio do pacote `report`, utilizamos `report(t_results)` para gerar um resumo interpretativo e amigável da análise, incluindo valor-p, estimativa da diferença entre médias, intervalo de confiança e recomendação de interpretação estatística. Essa abordagem une precisão estatística com clareza na comunicação dos resultados.\n\n```{r}\nattach(dat_mg2)\nt_results <- t.test(control, Mg2, \n                    var.equal = FALSE) \n\nlibrary(report)\nreport(t_results)\n\n```\n\nEssa é outra alternativa para o test t no R. Utilizamos a função `t_test()` do pacote **rstatix** para comparar as médias da variável `comp` entre os grupos definidos em `trat`. Essa função é prática, retorna o valor-p, a estatística t, e o intervalo de confiança, tudo em um formato limpo e fácil de interpretar.\n\n```{r}\nlibrary(rstatix)\ntest <- t_test(comp ~ trat, data = dat_mg)\ntest\n```\n\n### Teste de normalidade dos dados\n\nAntes de aplicar muitos testes estatísticos, especialmente os chamados testes paramétricos (como o teste t e a ANOVA), é fundamental verificar se os dados seguem uma distribuição normal. Isso porque esses testes assumem que os dados têm um comportamento simétrico em torno da média. No R, o teste de normalidade mais utilizado é o teste de Shapiro-Wilk, acessado pela função `shapiro.test()`. Esse teste retorna um valor-p que indica se há evidências contra a normalidade dos dados. Um valor-p maior que 0,05 sugere que os dados não diferem significativamente de uma distribuição normal (ou seja, a normalidade pode ser assumida). Essa verificação é essencial para escolher corretamente os testes estatísticos a serem aplicados.\n\nPara verificar se os dados do grupo `Mg2` seguem uma distribuição normal, aplicamos o teste de Shapiro-Wilk com a função `shapiro.test(Mg2)`. O resultado do teste fornece um valor de estatística W e um valor-p. Se o valor-p for maior que 0,05, podemos assumir que os dados têm distribuição normal, o que permite o uso de testes paramétricos como o teste t ou ANOVA. Caso o valor-p seja menor que 0,05, significa que os dados se desviam da normalidade, e testes não paramétricos podem ser mais apropriados. Esse teste é simples, rápido e essencial em análises exploratórias iniciais.\n\n```{r}\nshapiro.test(Mg2)\n```\n\n```{r}\nshapiro.test(control)\n```\n\n```{r}\nhist(dat_mg2$Mg2)\n```\n\n```{r}\nhist(control)\n```\n\n```{r}\nvar.test(dat_mg2$Mg2,\n         dat_mg2$control)\n```\n\n## Teste t para amostras dependentes\n\nO teste t para amostras dependentes (ou teste t pareado) é utilizado quando os dois conjuntos de dados estão relacionados, ou seja, as observações de um grupo têm correspondência direta com as do outro. Isso é comum em experimentos antes e depois, em medidas repetidas no mesmo indivíduo ou em tratamentos aplicados na mesma unidade experimental. No R, usamos a função `t.test(x, y, paired = TRUE)` para esse tipo de análise. O argumento `paired = TRUE` informa que as amostras são dependentes. Esse teste compara a diferença entre os pares de observações e verifica se a média dessas diferenças é significativamente diferente de zero. É uma forma robusta de análise quando há relação entre os grupos, reduzindo a variabilidade e aumentando o poder do teste.\n\nAbaixo são demostrados dois exemplos:\n\nExemplo 1\n\n```{r}\nescala\n```\n\n```{r}\nt_test(acuracia ~ assessment,\n       data = escala,\n       paired = TRUE)\n```\n\n```{r}\nescala |> \n  ggplot(aes(assessment, acuracia))+\n  geom_boxplot()\n```\n\n## Teste de Wilcoxon\n\nO teste de Wilcoxon é uma alternativa não paramétrica ao teste t, usado quando os dados não seguem uma distribuição normal. Ele pode ser aplicado tanto para amostras independentes (`wilcox.test(x, y)`) quanto para amostras pareadas (`wilcox.test(x, y, paired = TRUE)`). Em vez de comparar médias, como o teste t, o Wilcoxon compara as posições (ou postos) dos valores, tornando-o mais robusto para dados assimétricos ou com outliers. Esse teste é ideal em análises onde a suposição de normalidade não é atendida, garantindo resultados confiáveis mesmo com dados não ideais. É muito utilizado em estudos biológicos, agronômicos e de ciências aplicadas quando se busca uma alternativa mais segura aos testes paramétricos tradicionais.\n\n## Anova - Análise de variância\n\nA Análise de Variância (ANOVA) é uma técnica estatística usada para verificar se existem diferenças significativas entre três ou mais médias de grupos. Ao invés de comparar pares de médias isoladamente, como no teste t, a ANOVA avalia se pelo menos um grupo difere significativamente dos demais com base na variação dos dados. No R, a função `aov()` permite aplicar o modelo de ANOVA, geralmente combinada com `summary()` para visualizar os resultados. Se o valor-p do teste for menor que 0,05, rejeita-se a hipótese de que todas as médias são iguais. No entanto, a ANOVA apenas indica que há diferenças — para saber quais grupos diferem entre si, é necessário aplicar testes de comparações múltiplas (como Tukey ou Dunnett). A ANOVA é amplamente utilizada em experimentos agrícolas, biomédicos e nas ciências sociais por sua capacidade de lidar com vários tratamentos ao mesmo tempo.\n\n```{r}\nmicelial\n```\n\n```{r}\nmicelial |> \n  ggplot(aes(especie, tcm))+\n  geom_boxplot(oulier.colour = NA)+\n  geom_jitter(width = 0.1)\n```\n\n```{r}\nanova1 <- aov(tcm ~especie, data = micelial)\nanova1\n```\n\n```{r}\nanova2 <- lm(tcm ~ especie, data = micelial)\nanova2\n```\n\n```{r}\nanova(anova1)\n```\n\n```{r}\nanova(anova2)\n```\n\n### Premissas da anova\n\nA Análise de Variância (ANOVA) é uma ferramenta estatística poderosa, mas sua aplicação e a validade de suas conclusões dependem de certas premissas que devem ser atendidas pelos dados. A primeira é a normalidade dos resíduos: assume-se que os resíduos (as diferenças entre os valores observados e os valores preditos pelo modelo) seguem uma distribuição normal. Em seguida, temos a homocedasticidade, ou seja, a igualdade das variâncias dos grupos que estão sendo comparados. Por fim, a independência das observações é crucial, garantindo que a medida de uma observação não seja influenciada ou dependente da medida de outra. A violação dessas premissas pode levar a inferências incorretas, sendo importante verificá-las antes de interpretar os resultados da ANOVA.\n\n```{r}\nhist(residuals(anova1))\nhist\n```\n\n```{r}\nshapiro.test(residuals(anova1))\n```\n\n```{r}\nbartlett.test(tcm ~ especie, data = micelial)\n```\n\n```{r}\nlevene_test(tcm ~ especie, data = micelial)\n```\n\n### Análise de agrupamento\n\nA **Análise de Agrupamento**, ou *Cluster Analysis*, é um conjunto de técnicas multivariadas exploratórias utilizadas para organizar dados em grupos (ou *clusters*) com base em sua similaridade. O objetivo principal é que os objetos dentro de um mesmo grupo sejam o mais parecidos possível entre si, enquanto sejam o mais dissimilares possível dos objetos em outros grupos. Diferente de outras técnicas estatísticas, a análise de agrupamento não exige um conhecimento prévio sobre a afiliação dos objetos a grupos específicos. Abaixo contém dois exemplos:\n\n#### Exemplo 1\n\n```{r}\nlibrary(emmeans)\nm <- emmeans(anova2, ~ especie)\nm\n```\n\n```{r}\nlibrary(multcomp)\nlibrary(multcompView)\ncld(m)\n```\n\n```{r}\npairs(m)\n```\n\n```{r}\npwpm(m)\n```\n\n#### Exemplo 2 - completo\n\n```{r}\ninsetos <- InsectSprays\ninsetos\n```\n\n```{r}\ninsetos |> \n  ggplot(aes(spray, count))+\n  geom_boxplot(outlier.colour = NA)+\n  geom_jitter(width = 0.1)\n```\n\n```{r}\nbartlett.test(sqrt(count) ~ spray, data = insetos)\n```\n\n```{r}\nm2 <- lm(sqrt(count) ~ spray, data = insetos)\nm2\n```\n\n```{r}\nhist(residuals(m2))\n```\n\n```{r}\nshapiro.test(residuals(m2))\n```\n\n```{r}\nqqnorm(residuals(m2))\n```\n\n```{r}\nqqnorm(residuals(m2))\nqqline(residuals(m2))\n\n```\n\n```{r}\nlibrary(performance)\ncheck_model(m2)\n```\n\n```{r}\nlibrary(DHARMa)\nm2\n```\n\n```{r}\nplot(simulateResiduals(m2))\n```\n\n## Alternativos para dados que violam os pressupostos da anova\n\nQuando os dados violam os pressupostos da ANOVA, como a normalidade ou homocedasticidade, existem alternativas. Testes não paramétricos, como o Kruskal-Wallis, são ideais por não exigirem distribuição normal. Transformações de dados (logarítmica, raiz quadrada) também podem ajudar a adequar os dados. Além disso, a ANOVA robusta e os Modelos Lineares Generalizados (GLMs) oferecem abordagens mais flexíveis para garantir inferências válidas.\n\n### Transformação da resposta\n\nA transformação da resposta é uma técnica estatística que aplica uma função matemática (como logaritmo, raiz quadrada ou Box-Cox) aos dados da variável dependente (resposta) para que eles atendam aos pressupostos de testes paramétricos, como a ANOVA. Isso é útil quando os dados não apresentam normalidade ou homogeneidade de variâncias (homocedasticidade). Ao transformar os dados, podemos estabilizar a variância, tornar a distribuição mais simétrica e, assim, validar o uso da ANOVA para obter resultados mais precisos e confiáveis.\n\nO comando a seguir ajusta um modelo de regressão linear (a função `lm` significa \"linear model\"). O `sqrt(count)` indica que a variável resposta (`count`) foi **transformada pela raiz quadrada**. Isso sugere que a variável `count` original pode ter tido problemas de normalidade ou homocedasticidade, e a transformação foi aplicada para tentar resolver isso. `~ spray`: Indica que `spray` é a variável preditora (independente). O `data = insetos` especifica que as variáveis `count` e `spray` estão no conjunto de dados chamado `insetos`.\n\n```{r}\nm3 <- lm(sqrt(count) ~ spray, data = insetos)\nm3\n```\n\n```{r}\nhist(residuals(m3))\n```\n\n`shapiro.test(...)`: Realiza o **teste de Shapiro-Wilk de normalidade**. Este é um teste estatístico formal para avaliar se uma amostra de dados veio de uma distribuição normal. A hipótese nula (H0​) do teste de Shapiro-Wilk é que os dados são normalmente distribuídos. Um p-valor baixo (geralmente menor que 0.05) indicaria evidência para rejeitar H0​, sugerindo que os resíduos *não* são normalmente distribuídos. Um p-valor alto indicaria que não há evidência suficiente para rejeitar H0​, ou seja, os resíduos *podem* ser considerados normais.\n\n```{r}\nshapiro.test(residuals(m3))\n```\n\n`qqnorm(...)`: Cria um **gráfico Q-Q normal (quantile-quantile plot)** dos resíduos. Este gráfico é outra ferramenta visual para verificar a **normalidade dos resíduos**. Se os pontos no gráfico se alinharem aproximadamente ao longo de uma linha reta diagonal, isso sugere que os resíduos são normalmente distribuídos. Desvios significativos da linha indicam não-normalidade.\n\n```{r}\nqqnorm(residuals(m3))\n```\n\nAdiciona uma linha de referência ao gráfico Q-Q normal que foi gerado pelo comando `qqnorm(residuals(m3))` na imagem anterior. Essa linha ajuda a visualizar quão bem os pontos do gráfico Q-Q se ajustam a uma distribuição normal. Se os pontos seguem de perto a linha, isso reforça a ideia de normalidade dos resíduos.\n\n```{r}\n\n```\n\n`anova(...)`: Realiza uma Análise de Variância (ANOVA) para o modelo linear `m3`. Este comando irá gerar uma tabela ANOVA, que mostra a significância da variável preditora (`spray`) na explicação da variabilidade da variável resposta (`sqrt(count)`). Você verá os quadrados médios, F-estatística e o p-valor associado, indicando se há diferença significativa entre os níveis de `spray`.\n\n```{r}\nanova(m3)\n```\n\n`emmeans(...)`: Significa \"estimated marginal means\" (médias marginais estimadas). Esta função, geralmente do pacote `emmeans`, calcula as médias ajustadas (ou médias dos mínimos quadrados) para cada nível da variável `spray`, considerando o modelo `m3`.\n\n```{r}\nm33 <- emmeans(m3, ~spray, type = \"response\")\nm33\n```\n\n`cld(...)`: Significa \"compact letter display\" (exibição de letras compactas). Esta função, também do pacote `emmeans` ou similar, é usada para realizar testes de comparação múltipla (por exemplo, Tukey HSD, Bonferroni, etc., dependendo da configuração padrão ou especificação). Ela atribui letras aos grupos, onde grupos que compartilham a mesma letra não são significativamente diferentes entre si, e grupos com letras diferentes são significativamente diferentes. Isso facilita a visualização de quais níveis de `spray` diferem uns dos outros após a análise ANOVA.\n\n```{r}\ncld(m33)\n```\n\n```{r}\nplot(m33)\n```\n\n#### Box Cox\n\nA Transformação Box-Cox é uma ferramenta inteligente que nos ajuda a \"ajustar\" os dados de uma variável para que eles se comportem de maneira mais adequada para certos testes estatísticos. Imagine que seus dados estão um pouco \"tortos\" ou com variabilidades muito diferentes entre si. Isso pode atrapalhar a análise. A Box-Cox trabalha descobrindo qual tipo de \"ajuste\" matemático (como elevar os números a uma certa potência, ou tirar o logaritmo, ou a raiz quadrada, etc.) fará com que esses dados se tornem mais simétricos (parecendo uma \"curva de sino\" normal) e com variabilidades mais parecidas entre os grupos.\n\n```{r}\nlibrary(MASS)\ninsects <- InsectSprays\n```\n\n```{r}\nm1 <- lm(count ~ spray, data = insects)\n```\n\n```{r}\nlibrary(DHARMa)\nplot(simulateResiduals(m1))\n```\n\n```{r}\nboxcox(lm(insects$count + 0.1 ~ 1))\n```\n\n```{r}\nb <- boxcox(lm(insects$count + 0.1 ~ 1))\n```\n\n```{r}\nlambda <- b$x[which.max(b$y)]\nlambda\n```\n\n```{r}\nlibrary(tidyverse)\nInsects <- insects |>\n  mutate(count = as.numeric(count), \n         count3 = sqrt(count))\n  \nInsects\n```\n\n```{r}\ninsects$count2 <- (insects$count ^ lambda - 1) / lambda\n```\n\n```{r}\nhist(insects$count)\n```\n\n### Teste não paramétrico\n\nUm teste não paramétrico é um tipo de teste estatístico que não exige que os dados sigam uma distribuição específica (como a distribuição normal). Diferentemente dos testes paramétricos (como a ANOVA), que assumem certas características da população (parâmetros), os testes não paramétricos são mais flexíveis e não fazem essas suposições rigorosas sobre a forma da distribuição dos dados ou a homogeneidade das variâncias.\n\nEles são particularmente úteis quando:\n\nOs dados não atendem aos pressupostos dos testes paramétricos (por exemplo, falta de normalidade ou homocedasticidade).\n\nA amostra é pequena.\n\nOs dados são ordinais (categorias com uma ordem, mas sem intervalos iguais) ou nominais (categorias sem ordem).\n\nExemplos comuns de testes não paramétricos incluem o Teste de Kruskal-Wallis (alternativa à ANOVA para múltiplos grupos), o Teste de Mann-Whitney U (alternativa ao teste t de Student para dois grupos independentes) e o Teste de Wilcoxon (alternativa ao teste t pareado).\n\n```{r}\nkruskal.test(count ~ spray, data = insetos)\n```\n\nPode ser feito pelo pacote rstatix.\n\n```{r}\nlibrary(rstatix)\nkruskal_test(insetos, count ~spray)\n```\n\nOu pelo pacote agrocolae.\n\n```{r}\nlibrary(agricolae)\nkruskal(insetos$count, insetos$spray, group = TRUE, \n        console = TRUE)\n```\n\n### Modelos lineares generalizados\n\nModelos Lineares Generalizados (GLMs) são uma extensão poderosa dos modelos de regressão linear tradicionais. Enquanto a regressão linear padrão assume que a variável resposta (dependente) tem uma distribuição normal e que a relação entre a resposta e os preditores é linear, os GLMs são \"generalizados\" porque flexibilizam essas duas suposições principais.\n\nUm GLM permite:\n\n1.  Variáveis Resposta com Diferentes Distribuições: A variável resposta não precisa ser normalmente distribuída. GLMs podem lidar com respostas que seguem distribuições como Poisson (para contagens), Binomial (para proporções ou dados binários), Gama, entre outras.\n\n2.  Funções de Ligação (Link Function): A relação entre a média da variável resposta e os preditores não precisa ser diretamente linear. Em vez disso, uma \"função de ligação\" (link function) é usada para transformar a média da resposta para uma escala onde a relação é linear. Por exemplo, para dados de contagem, o logaritmo da média pode ser modelado linearmente.\n\nIsso torna os GLMs extremamente versáteis para analisar uma ampla gama de tipos de dados, especialmente quando os pressupostos dos modelos lineares clássicos são violados. Eles são amplamente utilizados em diversas áreas, como biologia, epidemiologia e economia.\n\n```{r}\nm4 <- glm(count ~ spray, data = insetos, \n          family = poisson)\nm4\n```\n\n```{r}\nanova(m4)\n```\n\n```{r}\nlibrary(car)\nAnova(m4)\n```\n\n```{r}\nlibrary(DHARMa)\nplot(simulateResiduals(m4))\n```\n\n```{r}\nmedias_m4 <- emmeans(m4, ~ spray, type = \"response\")\nmedias_m4 \n```\n\n```{r}\nlibrary(multcomp)\nlibrary(multcompView)\ncld(medias_m4)\n```\n\n## Anova fatorial\n\nA ANOVA Fatorial é uma extensão da Análise de Variância (ANOVA) que permite examinar simultaneamente o efeito de duas ou mais variáveis independentes categóricas (chamadas de \"fatores\") sobre uma única variável dependente quantitativa. A principal vantagem da ANOVA Fatorial é que ela não apenas testa o efeito de cada fator individualmente (chamado de efeito principal), mas também a interação entre eles. Uma interação ocorre quando o efeito de um fator sobre a variável dependente muda dependendo do nível de outro fator.\n\n#### Exemplo 1\n\n```{r}\nantifungicos\n```\n\n```{r}\ninteraction.plot(antifungicos$treat, antifungicos$dose, antifungicos$severity)\n```\n\n```{r}\np1 <- antifungicos |>\n  ggplot(aes(factor(dose), severity*100))+\n  geom_jitter(width = 0.1)\np1\n```\n\n```{r}\np2 <- antifungicos |>\n  ggplot(aes(factor(treat), severity*100))+\n  geom_jitter(width = 0.1)\n\n```\n\n```{r}\nlibrary(ggplot2)\nantifungicos |>\n  ggplot(aes(factor(dose), severity*100))+\n  geom_jitter(width = 0.1)+\n  facet_wrap(~ treat)\n```\n\n```{r}\nm_anti <- lm(severity ~ treat*dose, data = antifungicos)\nm_anti\n```\n\n```{r}\nanova(m_anti)\n```\n\n```{r}\nlibrary(DHARMa)\nplot(simulateResiduals(m_anti))\n```\n\n```{r}\nlibrary(emmeans)\nmedia_anti <- emmeans(m_anti, ~ dose | treat)\nmedia_anti\n```\n\n```{r}\ncld(media_anti)\n```\n\n```{r}\nlibrary(agricolae)\ncv.model(m_anti)\n```\n\n|          | 0.5     | 2.0  |\n|----------|---------|------|\n| LI       | 29.2 Aa | 5 Ab |\n| Tebu     | 2.1 Ba  | 2 Aa |\n| CV = 63% |         |      |\n\n#### Exemplo 2\n\n```{r}\nlibrary(epifitter)\noidio <- PowderyMildew\noidio\n```\n\n```{r}\nlibrary(ggplot2)\noidio |>\n  ggplot(aes(factor(time), sev))+\n  geom_jitter(width = 0.1)+\n  facet_wrap(~ irrigation_type)\n```\n\n```{r}\noidio2 <- oidio |>\n  dplyr::filter(irrigation_type %in% c(\"MS\", \"MS above canopy\", \n           \"Overhead\"))\noidio2\n```\n\n```{r}\noidio2 |>\n  ggplot(aes(time, sev))+\n  geom_point()+\n  facet_grid(moisture ~ irrigation_type)\noidio2\n```\n\n```{r}\noidio3 <- oidio2 |>\n  group_by(irrigation_type, moisture, block) |>\n  summarize(AUDPC = AUDPC(time, sev), .groups = \"drop\")\noidio3\n```\n\n```{r}\noidio3 |>\n  ggplot(aes(irrigation_type, \n             AUDPC, color = moisture))+\n  geom_point(size = 2)+\n  scale_y_continuous(limits = c(0,20))\n```\n\n```{r}\nmodel_oidio <- lm(AUDPC ~ irrigation_type * moisture, \n                  data = oidio3)\nmodel_oidio\n\n```\n\n```{r}\nanova(model_oidio)\n```\n\n```{r}\nplot(simulateResiduals(model_oidio))\n```\n\n```{r}\nmedias_oidio <- emmeans(model_oidio, ~ irrigation_type | moisture)\nmedias_oidio\n```\n\n```{r}\ncld(medias_oidio)\n```\n\n```{r}\ncv.model(model_oidio)\n```\n\n| Irrigation | H. moisture | M. moisture |\n|------------|-------------|-------------|\n| MS         | 8.52 Aa     | 11.18 Ab    |\n| MS AC      | 3.99 Ba     | 4.86 Bb     |\n| Overhead   | 3.68 Ba     | 3.81 Ca     |\n| CV = 6,41  |             |             |\n\n## Anova - Delineamento interamente casualizado (DBC)\n\n![](images/clipboard-7850165.png){fig-align=\"center\" width=\"353\"}\n\nO **Delineamento Inteiramente Casualizado (DIC)** é o plano experimental mais básico e simples para estudos que utilizam Análise de Variância (ANOVA). Ele é empregado quando as **unidades experimentais** (por exemplo, parcelas de terra, animais, indivíduos) são consideradas **homogêneas**, ou seja, não há nenhuma fonte de variação conhecida que possa diferenciá-las sistematicamente antes da aplicação dos tratamentos.\n\nA característica principal do DIC é que os **tratamentos são alocados às unidades experimentais de forma completamente aleatória**, sem restrições, garantindo que cada unidade tenha a mesma chance de receber qualquer um dos tratamentos. Isso ajuda a distribuir uniformemente quaisquer variações não controladas entre os grupos, permitindo que qualquer diferença observada na variável resposta seja atribuída aos tratamentos aplicados.\n\nA ANOVA é utilizada para analisar os dados de um DIC, comparando as médias dos grupos de tratamento para verificar se existem diferenças estatisticamente significativas entre eles. É ideal para experimentos em laboratório ou em ambientes muito controlados, onde a uniformidade das condições pode ser assegurada.\n\n```{r}\ncampo\n```\n\n```{r}\ncor(campo$FER, campo$PROD)\n```\n\n```{r}\ncor.test(campo$FER, campo$DFC)\n```\n\n```{r}\ncampo |>\n  ggplot(aes(FER, DFC))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n```\n\n```{r}\ncampo |>\n  mutate(TRAT = factor(TRAT)) |>\n  ggplot(aes(TRAT, PROD))+\n  geom_jitter(widht = 0.1)+ \n  stat_summary(\n    fun.data = \"mean_cl_boot\",\n    colour = \"red\", width = 0.3\n  )\n```\n\n```{r}\ncampo$TRAT <- factor(campo$TRAT)\ncampo$TRAT\n```\n\n```{r}\ncampo$BLOCO <- factor(campo$BLOCO)\ncampo$BLOCO\n```\n\n```{r}\nm_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)\nm_campo\n```\n\n```{r}\nanova(m_campo)\n```\n\n```{r}\nlibrary(DHARMa)\nplot(simulateResiduals(m_campo))\n```\n\n```{r}\nmeans_campo <- emmeans(m_campo, ~ TRAT, type = \"response\")\nmeans_campo\n```\n\n```{r}\nlibrary(agricolae)\ncv.model(m_campo)\n```\n\n```{r}\nplot(means_campo)\n```\n\n```{r}\nlibrary(multcomp)\ncld(means_campo)\n```\n\n```{r}\npwpm(means_campo)\n```\n\n## Modelo misto - Delineamento com parcelas subdivididas\n\n![](images/clipboard-143458175.png){fig-align=\"center\"}\n\nO Delineamento com Parcelas Subdivididas (Split-Plot Design) é um tipo de delineamento experimental utilizado quando há dois ou mais fatores e um deles (o fator de parcela principal) exige unidades experimentais maiores ou é mais difícil de ser aleatorizado do que o outro(s) fator(es) (o fator de subparcela).\n\nNesse delineamento, as unidades experimentais são divididas em:\n\nParcelas Principais: Onde os níveis do fator principal são aplicados aleatoriamente.\n\nSubparcelas: Cada parcela principal é subdividida em subparcelas, e os níveis do segundo fator (ou fatores) são aplicados aleatoriamente dentro de cada subparcela.\n\nA análise de dados de um delineamento com parcelas subdivididas frequentemente requer um Modelo Misto. Um Modelo Misto é um tipo de modelo estatístico que incorpora tanto efeitos fixos quanto efeitos aleatórios.\n\nEfeitos Fixos: São os efeitos dos tratamentos (fatores) que o pesquisador está interessado em comparar diretamente (por exemplo, diferentes tipos de fertilizante, variedades de plantas).\n\nEfeitos Aleatórios: São os efeitos de fatores cujos níveis são amostras de uma população maior de possíveis níveis, ou que representam fontes de variação que não são de interesse direto, mas precisam ser contabilizadas (por exemplo, o bloco experimental, ou a parcela principal no delineamento split-plot). A parcela principal, no contexto de um delineamento split-plot, é geralmente tratada como um efeito aleatório porque as subparcelas dentro dela compartilham as mesmas condições do fator principal, introduzindo uma correlação entre as observações dentro da mesma parcela principal.\n\n```{r}\nmilho\n```\n\n```{r}\nmilho |>\n  ggplot(aes(hybrid, index, color = method))+\n  geom_jitter(widht = 0.1)+ \n  coord_flip()\n```\n\n```{r}\nmilho$hybrid_block <- interaction(milho$hybrid, milho$block) #interação entre o hibrido e bloco\nmilho$hybrid_block\n```\n\n```{r}\nmilho |> \n  mutate(hybrid_block = interaction(hybrid, block)) # fator único entre hibrido e bloco - uma coluna\n```\n\n```{r}\nlibrary(lme4)\nm_milho <- lmer(index ~ hybrid*method +\n                  (1| block:hybrid_block), \n                data = milho)\n```\n\n```{r}\ncar::Anova(m_milho)\n```\n\n```{r}\nplot(simulateResiduals(m_milho))\n```\n\n```{r}\nmedia_milho <- emmeans(m_milho, ~ method | hybrid)\n```\n\n```{r}\ncld(media_milho, Letters = letters)\n```\n\n```{r}\nm_milho3 <- lmer(yield ~ hybrid*method +\n                  (1| block:hybrid_block), \n                data = milho)\n```\n\n```{r}\nplot(simulateResiduals(m_milho3))\n```\n\n```{r}\nmedia_milho3 <- emmeans(m_milho3, ~ hybrid | method)\nmedia_milho3\n```\n\n```{r}\ncld(media_milho3, Letters = letters)\n```\n\n## Correlação\n\nA correlação mede a força e a direção da relação linear entre duas variáveis quantitativas. O coeficiente de Pearson (r) varia de -1 (relação negativa forte) a +1 (relação positiva forte), sendo 0 para nenhuma relação linear. Importante: Correlação não significa causalidade!\n\n#### Relação de yield e index\n\nA relação entre \"Yield\" (Rendimento/Produtividade) e \"Index\" (Índice) é a forma como essas duas variáveis se comportam em conjunto.\n\nYield refere-se à quantidade de algo produzido ou ao retorno obtido (por exemplo, a produção de uma cultura por hectare, o rendimento de um investimento).\n\nIndex (Índice) é uma medida comparativa que representa o desempenho de um grupo de variáveis ou um agregado ao longo do tempo (por exemplo, um índice de preços, um índice de mercado de ações, um índice de fertilidade do solo).\n\nA relação entre eles pode ser:\n\nPositiva: Um aumento no índice (por exemplo, um índice de manejo otimizado) tende a estar associado a um aumento no rendimento.\n\nNegativa: Um aumento no índice (por exemplo, um índice de pragas) tende a estar associado a uma diminuição no rendimento.\n\nNula: Não há uma relação linear clara.\n\n```{r}\nmilho |>\n  ggplot(aes(index, yield))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n```\n\n```{r}\ncor1 <- cor(milho$index, milho$yield)\n```\n\n```{r}\ncor1*cor1*100\n```\n\n```{r}\ncor.test(milho$index, milho$yield)\n```\n\n## Análise de regressão\n\nA **Análise de Regressão** é uma técnica estatística usada para modelar e investigar a **relação entre uma variável dependente** (resposta) e **uma ou mais variáveis independentes** (preditoras). O objetivo principal é entender como as mudanças nas variáveis independentes estão associadas às mudanças na variável dependente e, em muitos casos, **prever** o valor da variável dependente com base nos valores das variáveis independentes. Existem vários tipos de regressão, mas a mais comum é a **Regressão Linear Simples**, que modela uma relação linear entre uma variável dependente e uma única variável independente. A **Regressão Linear Múltipla** estende isso para múltiplas variáveis independentes. O resultado de uma análise de regressão é um **modelo matemático** (uma equação) que descreve essa relação, permitindo, por exemplo, estimar o impacto de um fator sobre outro ou fazer previsões.\n\n```{r}\nestande\n```\n\n```{r}\nlibrary(ggplot2)\nestande |>\n  ggplot(aes(trat,nplants))+\n  geom_point(color = \"gray\")+\n  geom_smooth(method = \"lm\", se = FALSE, \n              color = \"black\")+\n  facet_wrap(~ exp)+\n  theme_minimal()+\n  labs(x = \"% de inóculo na semente\", \n       y = \"Número de plantas\")\n```\n\n```{r}\nexp1 <- estande |>\n  filter(exp == 1)\n```\n\n```{r}\nm_exp1 <- lm(nplants ~ trat + bloco, data = exp1)\n```\n\n```{r}\nsummary(m_exp1)\n```\n\n```{r}\nexp2 <- estande |>\n  filter(exp == 2)\n```\n\n```{r}\nm_exp2 <- lm(nplants ~ trat, data = exp2)\n```\n\n```{r}\nsummary(m_exp2)\n```\n\n```{r}\nexp3 <- estande |>\n  filter(exp == 3)\n```\n\n```{r}\nm_exp3 <- lm(nplants ~ trat, data = exp3)\n```\n\n```{r}\nsummary(m_exp3) \n```\n\n## Modelo misto\n\nUm Modelo Misto é um tipo de modelo estatístico que inclui dois tipos de efeitos: efeitos fixos e efeitos aleatórios.\n\nEfeitos Fixos: Representam os fatores cujos níveis são de interesse direto para o pesquisador e são considerados fixos (por exemplo, diferentes tratamentos, doses específicas).\n\nEfeitos Aleatórios: Representam fatores cujos níveis são uma amostra de uma população maior de níveis possíveis, ou fontes de variação que não são o foco principal, mas precisam ser contabilizadas (por exemplo, indivíduos, blocos, ou parcelas em um experimento).\n\nA inclusão de efeitos aleatórios permite que o modelo lide com a variabilidade e a correlação entre as observações que não são explicadas pelos efeitos fixos, tornando-o muito útil para dados com estruturas hierárquicas ou repetidas.\n\n```{r}\nlibrary(lme4)\nm_misto <- lmer(nplants ~ trat + (1 | exp/bloco), data = estande)\n```\n\n```{r}\nconfint(m_misto)\n```\n\n```{r}\nsummary(m_misto)\n```\n\n```{r}\nlibrary(car)\ncar::Anova(m_misto)\n```\n\n```{r}\nestande |> \n  ggplot(aes(trat, nplants, color = factor(exp)))+\n  geom_point()+\n  # geom_smooth(method = \"lm\", se = FALSE)+\n  geom_abline(intercept = 69.74,\n              slope = -0.568, linewidth = 2)+\n  geom_abline(intercept = 43, \n              slope = -0.73, linetype = \"dashed\")+\n  geom_abline(intercept = 96, \n              slope = -0.40, linetype = \"dashed\")\n```\n\n## Regressão não linear\n\nA Regressão Não Linear é uma técnica estatística utilizada para modelar a relação entre uma variável dependente e uma ou mais variáveis independentes, quando essa relação não pode ser descrita por uma linha reta. Ao contrário da regressão linear, que assume uma relação linear direta, a regressão não linear utiliza funções matemáticas não lineares (curvas) para ajustar os dados.\n\nEssa abordagem é necessária quando os fenômenos estudados apresentam padrões de crescimento, decaimento, saturação ou outras formas curvilíneas. Por exemplo, o crescimento populacional, a resposta de uma planta a um nutriente ou a taxa de uma reação química podem seguir curvas e não linhas retas.\n\nPara ajustar um modelo de regressão não linear, é preciso especificar a forma da função não linear com base no conhecimento teórico ou na visualização dos dados. Os parâmetros dessa função são então estimados para encontrar a curva que melhor se ajusta aos pontos observados.\n\n```{r}\nfungi\n```\n\n```{r}\nfungi |>\n  group_by(code, dose) |>\n  summarise(germination = mean(germination)) |>\n  ggplot(aes(dose, germination))+\n  geom_point()+\n  geom_line()+\n # geom_smooth(se = FALSE)+\n  facet_wrap(~ code)\n```\n\n```{r}\nFGT43 <- fungi |>\n  group_by(code, dose) |>\n  summarise(germination = mean(germination)) |>\n  filter(code == \"FGT43\")\n```\n\n```{r}\nlibrary(drc)\n\nm43 <- drm(germination ~ dose, \n           data = FGT43,\n           fct = LL.3())\n```\n\n```{r}\nsummary(m43)\n```\n\n```{r}\nAIC(m43)\n```\n\n```{r}\nplot(m43)\n```\n\n```{r}\nED(m43,50)\n```\n\n```{r}\nlibrary(ec50estimator)\n\ndf_ec50 = estimate_EC50(germination ~ dose,\n                        data = fungi, \n                        isolate_col = \"code\",\n                        strata_col = \"state\",\n                        interval = \"delta\", \n                        fct = drc::LL.3())\n\ndf_ec50\n```\n\n```{r}\ndf_ec50 |>\n  ggplot(aes(reorder(ID, Estimate), Estimate))+\n  geom_point()+\n  coord_flip()\n```\n\n```{r}\ndf_ec50 |>\n  ggplot(aes(x = Estimate))+\n  geom_histogram(bins = 5, color = \"white\")\n```\n\n# Desenvolvimento de mapas no R\n\n![](images/clipboard-2993649006.png){fig-align=\"center\"}\n\nO R é uma ferramenta poderosa e flexível para o desenvolvimento e visualização de mapas, desde mapas simples de pontos até análises geoespaciais complexas. O processo geralmente envolve as seguintes etapas e pacotes principais:\n\n#### Etapas Principais:\n\n**Obtenção de Dados Geoespaciais:**\n\n**Dados Vetoriais:** Representam feições geográficas como pontos (cidades, eventos), linhas (estradas, rios) e polígonos (países, estados, municípios). Formatos comuns incluem Shapefile (.shp), GeoJSON (.geojson), KML (.kml). Podem ser baixados de bases de dados oficiais (IBGE, OpenStreetMap), ou criados a partir de coordenadas.\n\n**Dados Raster:** Representam superfícies contínuas, como imagens de satélite, modelos digitais de elevação (DEM) ou mapas de temperatura. Formatos comuns incluem GeoTIFF (.tif), ASCII Grid.\n\n**Dados Tabulares com Coordenadas:** Tabelas com latitudes e longitudes que podem ser convertidas em pontos geoespaciais.\n\n**Leitura e Manipulação de Dados:**\n\nOs dados geoespaciais são lidos no R e manipulados para seleção de áreas de interesse, filtragem, união com dados não espaciais, etc.\n\n**Visualização (Plotagem):**\n\nA etapa final é a criação do mapa, adicionando camadas de dados, cores, legendas, títulos e outros elementos cartográficos.\n\nAbaixo está o desenvovimento do mapa realizado em sala:\n\n## Apresentação\n\nO conjunto de dados será o da ferrugem do café na Etiópia que está no arquivo de dados na nuvem.\n\n![](images/clipboard-1804384383.png)\n\n## Importar dados\n\nUsaremos a função `gsheet2tbl()` do pacote \\[gsheet\\] para carregar os dados no ambiente.\n\n```{r}\nlibrary(gsheet)\n\nlibrary(DT)\ndatatable(cr)\n\n```\n\n```{r}\ncr\n```\n\n## Visualização dos dados\n\nUsaremos a função `datatable()` do pacote \\[DT\\].\n\n```{r}\nlibrary(DT)\ndatatable(cr)\n```\n\n## Desenvolvimento de gráficos\n\n```{r}\nlibrary(tidyverse)\n\ncr |>\n  ggplot(aes(lon, lat))+\n  geom_point()\n```\n\n```{r}\nlibrary(rnaturalearth)\nlibrary(remotes)\n#remotes::install_github(\"ropensci/rnaturalearthhires\")\nETH <- ne_states(country = \"Ethiopia\",\n                 returnclass = \"sf\")\n\n#ETH <- ne_states(coutry = \"Brasil\",\n                # returnclass = \"sf\")\n\n## PARA CRIAR SHAP DO BRASIL -  CORTAR\n\nlibrary(tidyverse)\n\nETH |>\nggplot() +\n  geom_sf(fill = \"white\") +\n  geom_point(data = cr, aes(lon, lat, color = inc)) +\n  scale_color_viridis_c()+\n  theme_void()\n\nlibrary(ggthemes)\nlibrary(ggspatial)\nETH |>\nggplot() +\n  geom_sf(fill = \"white\") +\n  geom_point(data = cr, aes(lon, lat, color = inc)) +\n  scale_color_viridis_c() +\n  theme_map() \n  \nlibrary(ggspatial)\nmapa <- ETH |>\nggplot() +\n  geom_sf(fill = \"gray90\") +\n  geom_point(data = cr, aes(lon, lat, color = inc)) +\n  scale_color_viridis_c() +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  annotation_scale(location = \"tl\") +\n  annotation_north_arrow(location = \"br\", which_north = \"true\") + \n  labs(title = \"ferrugem do café na Etiópia\",\n       x = \"longitude\", y = \"latitude\",\n       subtitle = \"Levantamento em fazendas\", \n       caption = \"Fonte: Del Ponte et al. (2025\",\n       color = \"Incidência(%)\") \n\n```\n\n## Salvar gráficos como imagem\n\n```{r}\nggsave(\"mapa_etiopia.png\", bg = \"white\", width = 10)\n#ggsave(\"mapa_etiopia.pdf\", bg = \"white\", width = 10)\n```\n\n# Website utilizando R\n\n![](images/clipboard-2222905033.png){fig-align=\"center\" width=\"378\"}\n\nO Quarto é uma ferramenta de publicação científica e técnica que permite criar diversos tipos de documentos, incluindo websites, a partir de arquivos Markdown ou notebooks Jupyter/R. O GitHub é usado para hospedar seu site (GitHub Pages) e para controle de versão.\n\n### Passo a passo de confecção do website\n\n#### **Criando o Website com Quarto:**\n\n**Criar um Novo Projeto Quarto no RStudio**\n\n1.  Abra o RStudio.\n\n2.  Vá em File \\> New Project...\n\n3.  Selecione New Directory.\n\n4.  Escolha Quarto Website.\n\n5.  Dê um nome ao diretório (ex: meu_website_quarto).\n\n6.  Escolha onde salvar o projeto.\n\n7.  Clique em Create Project.\n\nAo fazer isso, o RStudio criará uma estrutura de arquivos básica para seu website, incluindo:\n\n-   quarto.yml: O arquivo de configuração principal do seu site.\n\n-   index.qmd: A página inicial do seu site.\n\n-   about.qmd: Uma página \"Sobre\".\n\n**Personalização:**\n\n-   **Adicionar Páginas:** Para adicionar uma nova página, crie um novo arquivo .qmd (ex: blog.qmd) no diretório raiz do seu projeto e adicione-o ao navbar em \\_quarto.yml.\n\n-   **Estrutura de Pastas:** Você pode organizar suas páginas em subpastas. Por exemplo, blog/primeiro-post.qmd. Lembre-se de atualizar os href no navbar se fizer isso.\n\n**Escrevendo Conteúdo (.qmd files)**\n\nAbra index.qmd e about.qmd. Você verá que eles são arquivos Markdown com algumas adições específicas do Quarto.\n\n**Renderizando o Website Localmente**\n\nNo RStudio, você verá um botão \"Render Website\" no painel \"Build\" (geralmente no canto superior direito). Clique nele. Isso irá \"renderizar\" seu website, criando os arquivos HTML, CSS e JavaScript necessários em uma pasta chamada \\_site/. O Quarto também abrirá automaticamente seu site em um navegador para você visualizar. Sempre que fizer alterações, clique em \"Render Website\" novamente para ver as atualizações.\n\n**Publicando no GitHub Pages**\n\nAgora que seu site pronto localmente, publicá-lo no GitHub Pages.\n\n**Criar um Repositório no GitHub**\n\n1.  Vá para <https://github.com/> e faça login.\n\n2.  Clique no sinal + no canto superior direito e selecione New repository.\n\n3.  **Importante:** Nomeie o repositório exatamente como SEU_USUARIO.github.io (substitua SEU_USUARIO pelo seu nome de usuário do GitHub). Se for um repositório de projeto, o nome pode ser o que quiser (ex: meu-website-quarto), mas a forma SEU_USUARIO.github.io é mais fácil para um site pessoal.\n\n4.  Defina como Public.\n\n5.  Clique em Create repository.\n\n**Inicializar o Git Localmente e Fazer o Primeiro Commit**\n\n1.  No RStudio, vá no painel Git (se você não o vir, vá em Tools \\> Project Options \\> Git/SVN e certifique-se de que Version control system esteja definido como Git).\n\n2.  Clique em Commit.\n\n3.  Marque todos os arquivos (Stage All).\n\n4.  Escreva uma mensagem de commit (ex: \"Primeiro commit do website Quarto\").\n\n5.  Clique em Commit.\n\n6.  Feche a janela de commit.\n\n**Conectar o Repositório Local ao GitHub**\n\n1.  No RStudio, no painel Git, clique no botão More \\> Shell... para abrir um terminal Git.\n\n2.  No terminal, adicione o repositório remoto (substitua SEU_USUARIO e NOME_DO_REPOSITORIO pelos seus).\n\n3.  Faça o primeiro push:\n\n**Configurar GitHub Pages**\n\n1.  Vá para o seu repositório no GitHub (ex: github.com/SEU_USUARIO/NOME_DO_REPOSITORIO).\n\n2.  Clique em Settings.\n\n3.  No menu lateral esquerdo, clique em Pages.\n\n4.  Em Branch, selecione a branch main (ou master) e a pasta \\_site (isso é crucial!).\n\n5.  Clique em Save.\n\nApós alguns minutos (pode levar de 1 a 10 minutos), seu site estará disponível na URL indicada na seção GitHub Pages.\n\n## Meu website\n\n![](images/clipboard-3537995573.png){fig-align=\"center\" width=\"404\"}\n\nPara prática da aula sobre desenvolvimento do website no R, todos da disciplina fizeram em grupo, um website. Este se encontra no link a seguir: <https://damarisfreitas.github.io/proj_final_606/>\n\nO website foi desenvolvido por mim, Letícia Caroline e Damaris Freitas.\n\nO site foi desenvolvido para apresentar as informações relacionadas à análise de dados sobre a eficiência de diferentes inseticidas no controle da traça-do-tomateiro (*Phthorimaea absoluta*). O conteúdo faz parte do trabalho final da disciplina FIP 606 – Análise e Visualização de Dados em Fitopatologia, ministrada pelo professor [Emerson Del Ponte](https://emersondelponte.netlify.app/).\n\n![](images/clipboard-3428952777.png){width=\"923\"}\n\n# Aplicativo utilizando o R\n\nNa aula de desenvolvimento de um aplicativo no R, foi mostrado o passo a passo de como fazer um aplicativo. Um aplicativo Shiny geralmente consiste em dois arquivos R principais: `ui.R` (interface do usuário) e `server.R` (lógica do servidor).\n\n### Passo a passo de confecção do website\n\n**1. Abrir o RStudio e Iniciar:**\n\n-   Vá em `File > New File > Shiny Web App...`\n\n-   Escolha `Single File (app.R)` para um aplicativo simples em um único arquivo, ou `Multiple File (ui.R/server.R)` para projetos maiores. Dê um nome ao seu aplicativo e salve em uma nova pasta.\n\n**2. Definir a Interface do Usuário (`ui`):**\n\n-   No arquivo `app.R` (ou `ui.R`), você terá uma seção `ui <- fluidPage(...)`.\n\n-   Aqui, você adiciona os **elementos de entrada** (o que o usuário controla) e os **locais de saída** (onde os resultados aparecem).\n\n-   **Exemplos de entrada:** `sliderInput()`, `textInput()`, `selectInput()`.\n\n-   **Exemplos de saída:** `plotOutput()` (para gráficos), `tableOutput()` (para tabelas), `textOutput()` (para texto).\n\n**3. Definir a Lógica do Servidor (`server`):**\n\n-   No mesmo `app.R` (ou `server.R`), você terá uma seção `server <- function(input, output) { ... }`.\n\n-   Esta é a \"cozinha\" do seu app. Use `input$` para acessar os valores definidos na UI e `output$` para enviar resultados para a UI.\n\n-   Crie as reações (gráficos, cálculos) usando `renderPlot()`, `renderTable()`, `renderText()` etc.\n\n**4. Rodar o Aplicativo:**\n\n-   Se for um `app.R`, basta clicar no botão **\"Run App\"** no canto superior direito do seu script no RStudio.\n\n-   Se forem `ui.R` e `server.R` separados, salve ambos na mesma pasta e use o comando `shiny::runApp(\"sua_pasta\")` no console.\n\n**5. Salvar:**\n\n-   Certifique-se de salvar seus arquivos (`app.R`, `ui.R`, `server.R`) na mesma pasta do seu projeto.\n\nCom isso, você terá um aplicativo Shiny básico funcionando!\n\n## Meu aplicativo\n\nPara prática da aula sobre desenvolvimento de aplicativo R, todos da disciplina fizeram, em grupo, um aplicativo. Este se encontra no link a seguir: <https://leticiacaroline01.shinyapps.io/Apptrab/>\n\nO aplicativo foi desenvolvido por mim, Letícia Caroline e Damaris Freitas.\n\nO aplicativo desenvolvido permite realizar análises estatísticas robustas para testes de eficiência de controle de pragas, oferecendo ferramentas para pesquisadores e profissionais da área.\n\n![](images/clipboard-2945835783.png)\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["custom.css"],"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n"}],"output-file":"02-Capítulo.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","bibliography":["references.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"02-Capítulo.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}